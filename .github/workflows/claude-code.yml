name: Claude Code

on:
  pull_request:
    types: [opened, ready_for_review, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  claude-code:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && 
       github.event.pull_request.draft == false && 
       (contains(github.event.pull_request.body || '', '@claude') || 
        contains(github.event.pull_request.title || '', '@claude'))) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request != null && 
       contains(github.event.comment.body || '', '@claude'))
    steps:
      - name: Debug trigger event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Is PR: ${{ github.event.issue.pull_request != null }}"
          echo "Comment body: ${{ github.event.comment.body || 'N/A' }}"
          echo "PR body: ${{ github.event.pull_request.body || 'N/A' }}"
          echo "PR draft: ${{ github.event.pull_request.draft || 'N/A' }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Clean up Claude-related comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue?.number || context.payload.pull_request?.number;
            if (!pr_number) {
              console.log('No PR number found, skipping comment cleanup');
              return;
            }
            
            console.log(`Fetching comments for PR #${pr_number}`);
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            
            console.log(`Found ${comments.data.length} total comments`);
            
            for (const comment of comments.data) {
              // Skip the PR description - we never delete that
              if (comment.html_url.includes('#issue-') || comment.pull_request_review_id) {
                continue;
              }
              
              console.log(`Checking comment by ${comment.user.login}: ${comment.body.substring(0, 50)}...`);
              
              let shouldDelete = false;
              let reason = '';
              
              // Delete all previous Claude bot comments
              if ((comment.user.login === 'github-actions[bot]' || 
                   comment.user.type === 'Bot') && 
                  (comment.body.toLowerCase().includes('claude') || 
                   comment.body.includes('Code Review'))) {
                shouldDelete = true;
                reason = 'previous Claude bot comment';
              }
              // Delete short trigger comments that only serve to invoke Claude
              else if (comment.body.includes('@claude') && 
                       comment.body.trim().length < 150 && 
                       !comment.body.includes('```') &&
                       !comment.body.includes('\n\n')) {
                shouldDelete = true;
                reason = 'short @claude trigger comment';
              }
              
              if (shouldDelete) {
                console.log(`Deleting ${reason}: ${comment.id} by ${comment.user.login}`);
                try {
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id
                  });
                  console.log(`Successfully deleted comment ${comment.id}`);
                } catch (error) {
                  console.error(`Failed to delete comment ${comment.id}: ${error.message}`);
                }
              }
            }
        
      - name: Claude Code Action Official
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          trigger_phrase: "@claude"
          custom_instructions: |
            You are a helpful code reviewer. Focus on:
            - Code quality and best practices in Rust
            - Potential bugs or issues
            - Performance improvements
            - Security concerns
            - Code style and formatting
            - Code documentation
            - Provide a summary of the changes in the PR