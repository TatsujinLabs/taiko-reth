name: Claude Code Review

on:
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: claude-review-pr-${{ github.event.pull_request.number || github.event.issue.number }}
  cancel-in-progress: false

jobs:
  claude-review:
    runs-on: ubuntu-latest
    # Only run if:
    # 1. PR is ready (not draft) AND contains @claude in description
    # 2. OR a new comment on a PR contains @claude
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.draft == false && 
       contains(github.event.pull_request.body || '', '@claude')) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request != null && 
       contains(github.event.comment.body || '', '@claude'))
    
    steps:
      - name: Log trigger details
        run: |
          echo "=== CLAUDE WORKFLOW TRIGGERED ==="
          echo "Event: ${{ github.event_name }}"
          echo "PR Number: ${{ github.event.pull_request.number || github.event.issue.number }}"
          echo "PR Draft: ${{ github.event.pull_request.draft || 'N/A' }}"
          echo "Comment: ${{ github.event.comment.body || 'N/A' }}"
          echo "Is PR: ${{ github.event.issue.pull_request != null }}"
          echo "Actor: ${{ github.actor }}"
          echo "================================"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Clean up previous Claude comments and triggers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue?.number || context.payload.pull_request?.number;
            if (!pr_number) {
              console.log('No PR number found');
              return;
            }
            
            // Get all comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            
            console.log(`Found ${comments.data.length} comments to process`);
            
            for (const comment of comments.data) {
              let shouldDelete = false;
              let reason = '';
              
              // Delete only Claude bot review comments (not all bot comments)
              if (comment.user.login === 'github-actions[bot]' && 
                  comment.body.includes('## Code Review by Claude')) {
                shouldDelete = true;
                reason = 'previous Claude review';
              }
              
              // Delete short trigger comments only
              if (context.eventName === 'issue_comment' && 
                  comment.id === context.payload.comment.id &&
                  comment.body.trim().length < 100 &&
                  !comment.body.includes('\n\n')) {
                shouldDelete = true;
                reason = 'short trigger comment';
              }
              
              if (shouldDelete) {
                console.log(`Deleting ${reason}: comment ${comment.id}`);
                try {
                  // Add a small delay to ensure GitHub processes the event
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id
                  });
                  console.log(`Successfully deleted comment ${comment.id}`);
                } catch (error) {
                  console.error(`Failed to delete comment ${comment.id}: ${error.message}`);
                }
              }
            }
      
      - name: Run Claude Code Review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          custom_instructions: |
            You are reviewing a Rust codebase for the Taiko protocol. Focus on:
            - Rust best practices and idioms
            - Performance implications
            - Security vulnerabilities
            - Code correctness and potential bugs
            - Clear and maintainable code structure
            
            Provide a concise summary followed by specific actionable feedback.