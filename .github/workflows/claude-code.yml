name: Claude Code

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  claude-code:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && 
       github.event.pull_request.draft == false && 
       (contains(github.event.pull_request.body || '', '@claude') || 
        contains(github.event.pull_request.title || '', '@claude'))) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body || '', '@claude'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Delete all previous Claude comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue?.number || context.payload.pull_request?.number;
            if (!pr_number) {
              console.log('No PR number found, skipping comment deletion');
              return;
            }
            
            console.log(`Fetching comments for PR #${pr_number}`);
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            
            console.log(`Found ${comments.data.length} total comments`);
            
            for (const comment of comments.data) {
              console.log(`Checking comment by ${comment.user.login}: ${comment.body.substring(0, 50)}...`);
              
              // Check if it's a bot comment containing Claude content
              if ((comment.user.login === 'github-actions[bot]' || 
                   comment.user.type === 'Bot') && 
                  (comment.body.toLowerCase().includes('claude') || 
                   comment.body.includes('Code Review by'))) {
                console.log(`Deleting comment ${comment.id} by ${comment.user.login}`);
                try {
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id
                  });
                  console.log(`Successfully deleted comment ${comment.id}`);
                } catch (error) {
                  console.error(`Failed to delete comment ${comment.id}: ${error.message}`);
                }
              }
            }
        
      - name: Claude Code Action Official
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          trigger_phrase: "@claude"
          custom_instructions: |
            You are a helpful code reviewer. Focus on:
            - Code quality and best practices in Rust
            - Potential bugs or issues
            - Performance improvements
            - Security concerns
            - Code style and formatting
            - Code documentation
            - Provide a summary of the changes in the PR